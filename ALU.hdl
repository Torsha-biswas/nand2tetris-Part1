/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        // Computation of x and y based on control bits
        Mux16(a=x, b=false, sel=zx, out=x1);
        Not16(in=x1, out=notx);
        Mux16(a=x1, b=notx, sel=nx, out=x2);

        Mux16(a=y, b=false, sel=zy, out=y1);
        Not16(in=y1, out=noty);
        Mux16(a=y1, b=noty, sel=ny, out=y2);
        
        // Calculation of x + y
        Add16(a=x2, b=y2, out=xyadded);

        // Calculation of x & y
        And16(a=x2, b=y2, out=xyanded);

        // Multiplexing between x + y and x & y based on f
        Mux16(a=xyanded, b=xyadded, sel=f, out=xyf);

        // Negation of the result based on no
        Not16(in=xyf, out=xyfNOT);
        Mux16(a=xyf, b=xyfNOT, sel=no, out=out, out[0..7]=outlow, out[8..15]=outhi, out[15]=ng);
        
        // Calculation of zero flag
        Or8Way(in=outlow, out=lowor);
        Or8Way(in=outhi, out=hior);
        Or(a=lowor, b=hior, out=nzr);

        Not(in=nzr, out=zr);
    }

